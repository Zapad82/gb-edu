# Крестики-нолики
# ● Контекст
# Вероятнее всего, вы с детства знакомы с этой игрой. Пришло
# время реализовать её. Два игрока по очереди ставят крестики
# и нолики на игровое поле. Игра завершается когда кто-то
# победил, либо наступила ничья, либо игроки отказались
# играть.
# ● Задача
# Написать игру в “Крестики-нолики”. Можете использовать
# любые парадигмы, которые посчитаете наиболее
# подходящими. Можете реализовать доску как угодно - как
# одномерный массив или двумерный массив (массив массивов).
# Можете использовать как правила, так и хардкод, на своё
# усмотрение. Главное, чтобы в игру можно было поиграть через
# терминал с вашего компьютера.


class Game:
    def __init__(self):
        self.board = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]
        self.current_player = 'X'
        self.num_moves = 0

    def display_board(self):
        for row in self.board:
            print(row)

    def check_winner(self):
        # проверка строки
        for row in self.board:
            if row[0] == row[1] == row[2] and row[0] != '-':
                return row[0]

        # проверка столбца
        for col in range(3):
            if self.board[0][col] == self.board[1][col] == self.board[2][col] and self.board[0][col] != '-':
                return self.board[0][col]

        # проверка диагонали
        if self.board[0][0] == self.board[1][1] == self.board[2][2] and self.board[0][0] != '-':
            return self.board[0][0]

        if self.board[0][2] == self.board[1][1] == self.board[2][0] and self.board[0][2] != '-':
            return self.board[0][2]

        # проверка на ничью
        if self.num_moves == 9:
            return "Ничья"

        return None

    def make_move(self, row, col):
        if self.board[row][col] == '-':
            self.board[row][col] = self.current_player
            self.num_moves += 1
            return True
        else:
            return False

    def switch_player(self):
        if self.current_player == 'X':
            self.current_player = 'O'
        else:
            self.current_player = 'X'

    def play_game(self):
        while True:
            self.display_board()
            row = int(input(f"Игрок {self.current_player}, введите номер строки (0-2): "))
            col = int(input(f"Игрок {self.current_player}, введите номер столбца (0-2): "))

            if self.make_move(row, col):
                winner = self.check_winner()
                if winner:
                    print(f"Игрок {winner} выиграл!")
                    break
                elif winner == "Ничья":
                    print("Это ничья!")
                    break
                else:
                    self.switch_player()
            else:
                print("Неверный ход. Повторите.")



game = Game()
game.play_game()


# После запуска программы игроки будут по очереди вводить номера ряда и столбца, куда хотят поставить свой знак. 
# После каждого хода будет отображаться текущее состояние поля. Если игра закончилась,
# то будет выведено сообщение о победителе или ничьей.


# Для реализации игры в “Крестики-нолики” мы будем использовать объектно-ориентированный подход. Создадим класс Game, 
# который будет представлять игру. В конструкторе класса мы будем инициализировать игровое поле, 
# которое будет представлено двумерным массивом размером 3x3. Также мы будем хранить информацию о текущем игроке и количестве ходов.

# Для отображения игрового поля на экране мы будем использовать метод display_board(), 
# который будет выводить текущее состояние поля на экран. Для проверки выигрышной комбинации мы будем использовать метод 
# check_winner(), который будет проверять все возможные комбинации на наличие выигрышной. 
# Если выигрышная комбинация найдена, то метод вернет имя победителя (крестик или нолик). 
# Если же на поле не осталось свободных клеток, то метод вернет значение “Ничья”.

# Основной метод игры play_game() будет запускать цикл игры, в котором игроки будут по очереди делать ходы. 
# После каждого хода будет производиться проверка на выигрышную комбинацию или ничью. Если игра закончилась, 
# то цикл прерывается и выводится соответствующее сообщение.