1) Почему использование тестовых заглушек может быть полезным при написании модульных тестов?

Использование тестовых заглушек может быть полезным при написании модульных тестов, потому что
они позволяют изолировать код от зависимостей, таких как внешние API, базы данных или другие
модули. Заглушки позволяют заменить реальные зависимости на имитацию, что делает тестирование
более предсказуемым и контролируемым. Также, использование заглушек позволяет тестировать
отдельные компоненты кода независимо друг от друга, что упрощает обнаружение и исправление ошибок.


2) Какой тип тестовой заглушки следует использовать, если вам нужно проверить, что метод был
вызван с определенными аргументами?

Для проверки, что метод был вызван с определенными аргументами, следует использовать заглушку
типа "спай". С помощью спая можно записать значения аргументов, с которыми метод был вызван,
и затем проверить их в тесте. Это позволяет убедиться, что метод вызывается с правильными
аргументами.


3) Какой тип тестовой заглушки следует использовать, если вам просто нужно вернуть определенное
значение или исключение в ответ на вызов метода?

Если вам просто нужно вернуть определенное значение или исключение в ответ на вызов метода, то
следует использовать заглушку типа "шпион". Шпион позволяет записать и запомнить, какие методы
были вызваны и с какими аргументами, и затем возвращать заранее заданные значения или генерировать
исключения при вызове этих методов. Это полезно, когда вам нужно проверить, как код реагирует
на определенные ситуации.


4) Какой тип тестовой заглушки вы бы использовали для имитации  взаимодействия с внешним API или
базой данных?

Для имитации взаимодействия с внешним API или базой данных следует использовать заглушку типа "мок".
Мок позволяет создать имитацию внешнего сервиса или базы данных, которая будет вести себя так же,
как реальный сервис или база данных, но без реального взаимодействия с ними. Это позволяет
тестировать код, который зависит от внешних ресурсов, без необходимости подключения к ним.
Моки также позволяют контролировать ответы и поведение имитируемого сервиса или базы данных,
что делает тестирование более предсказуемым.