// Обращение к свойствам объекта.
console.log(Romba.model); // "Romba-1"
console.log(Romba.isFull); // false

// Вызов методов объекта.
// Вызов метода объекта яерез call с явной передачей объекта робота-пылесоса в качестве контекста.
Romba.startCleaning.call(Romba); // I am cleaning... I have started: 1 times.
//Тут этот пример не очень показателен, т.к. мы и так имели доступ к объекту, а внутри setTimeout использовать call возможно только обернув все это в анонимную функцуию, но тоже бессмысенно, потому что тогда мы снова имеем доступ к объекту, как видели в прошлом примере. Но мы можем передать call другой объект и увидеть, что функция вызывается в контексте другого объекта:

//Создадим фиктивный объект робота, который содержит только одно свойство, необходимое для работы функуции и сразу же зададим ему первоначальное значение, отличное от того, которое задано у робота, для наглядности.
const notARobot = {
    counterOfStarts: 10,
};

Romba.startCleaning.call(notARobot); // I am cleaning... I have been started: 11 times.





/////
// Подобно методу call можно использовать метод apply, который также позволяет вызвать функцию и передать необходимый контекст, единственным отличием от call, метод apply принимает аргументы, которые необходимо передать в вызываемую функцию не списком через запятую, а в виде массива, что порой удобнее.
const notARobot2 = {
    counterOfStarts: 10,
};
// Пример использования метода apply, дл вызова функции с передачей в качестве контекста объекта notARobot и передачей в нее аргументов arg1, arg2, arg3.
Romba.startCleaning.apply(notARobot2, [arg1, arg2, arg3]); // I am cleaning... I have been started: 11 times.




/////

// Объект Romba - робот-пылесос. Код самого объекта смотри в листинге 1.
console.log(Romba.model); // "Romba-1"
console.log(Romba.isFull); // false

// Вызов методов объекта
// В setTimeout мы передаем не просто наш метод, а функцию, которая привязана к нашему объекту. Метод bind возвращает новую функцию, с уже привязанным контекстом, именно она вызывается по истечении времени.
setTimeout(Romba.startCleaning.bind(Romba), 1000);

// Установим свойства объекта isUVLampOn в true, чтобы продемонстрировать результаты метода switchUVLamp.
Romba.isUVLampOn = true;

// Результат вызова следующего метода зависит от назначения, хранящегося в свойстве объекта, а также от того, как этот метод был вызван (об этом чуть ниже)
setTimeout(Romba.switchUVLamp.bind(Romba), 2000);
setTimeout(Romba.goCharge.bind(Romba), 3000);

// I am cleaning... I have started: NaN times.
// UV lamp is working.
// I am going to charge...

// Все работает отлично
